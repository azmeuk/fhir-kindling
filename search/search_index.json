{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FHIR Kindling CRUD library for fhir servers, with resource validation and parsing powered by pydantic models created in the fhir.resources library. Warning Under construction. This documentation is not complete. Features Connect to FHIR (Version R4) servers using different auth methods CRUD operations Bundle upload, download and transfer Resource validation Resource generation for synthetic data sets Installation Install via pypi pip install fhir_kindling Install from source git clone https://github.com/migraf/fhir-kindling.git cd fhir_kindling pip install . The fhir kindling command should now be available in your shell (with the venv enabled) test it with fhir_kindling --help Quick start Connecting to a FHIR server from fhir_kindling import FhirServer # Connect with basic auth basic_auth_server = FhirServer ( \"https://fhir.server/fhir\" , username = \"admin\" , password = \"admin\" ) # Connect with static token token_server = FhirServer ( \"https://fhir.server/fhir\" , token = \"your_token\" ) # Connect using oauth2/oidc oidc_server = FhirServer ( \"https://fhir.server/fhir\" , client_id = \"client_id\" , client_secret = \"secret\" , oidc_provider_url = \"url\" ) # Print the server's capability statement print ( basic_auth_server . capabilities ) Query resources from the server from fhir_kindling import FhirServer from fhir.resources.patient import Patient # Connect using oauth2/oidc oidc_server = FhirServer ( \"https://fhir.server/fhir\" , client_id = \"client_id\" , client_secret = \"secret\" , oidc_provider_url = \"url\" ) # query all patients on the server query = oidc_server . query ( Patient , output_format = \"json\" ) . all () print ( query . response ) # Query resources based on name of resource query = oidc_server . query ( \"Patient\" , output_format = \"json\" ) . all () print ( query . response ) Credits All the FHIR resource validation is done via the fhir.resources package. The CLI was built using click . This package was created with Cookiecutter and the audreyr/cookiecutter-pypackage project template.","title":"Home"},{"location":"#fhir-kindling","text":"CRUD library for fhir servers, with resource validation and parsing powered by pydantic models created in the fhir.resources library. Warning Under construction. This documentation is not complete.","title":"FHIR Kindling"},{"location":"#features","text":"Connect to FHIR (Version R4) servers using different auth methods CRUD operations Bundle upload, download and transfer Resource validation Resource generation for synthetic data sets","title":"Features"},{"location":"#installation","text":"","title":"Installation"},{"location":"#install-via-pypi","text":"pip install fhir_kindling","title":"Install via pypi"},{"location":"#install-from-source","text":"git clone https://github.com/migraf/fhir-kindling.git cd fhir_kindling pip install . The fhir kindling command should now be available in your shell (with the venv enabled) test it with fhir_kindling --help","title":"Install from source"},{"location":"#quick-start","text":"","title":"Quick start"},{"location":"#connecting-to-a-fhir-server","text":"from fhir_kindling import FhirServer # Connect with basic auth basic_auth_server = FhirServer ( \"https://fhir.server/fhir\" , username = \"admin\" , password = \"admin\" ) # Connect with static token token_server = FhirServer ( \"https://fhir.server/fhir\" , token = \"your_token\" ) # Connect using oauth2/oidc oidc_server = FhirServer ( \"https://fhir.server/fhir\" , client_id = \"client_id\" , client_secret = \"secret\" , oidc_provider_url = \"url\" ) # Print the server's capability statement print ( basic_auth_server . capabilities )","title":"Connecting to a FHIR server"},{"location":"#query-resources-from-the-server","text":"from fhir_kindling import FhirServer from fhir.resources.patient import Patient # Connect using oauth2/oidc oidc_server = FhirServer ( \"https://fhir.server/fhir\" , client_id = \"client_id\" , client_secret = \"secret\" , oidc_provider_url = \"url\" ) # query all patients on the server query = oidc_server . query ( Patient , output_format = \"json\" ) . all () print ( query . response ) # Query resources based on name of resource query = oidc_server . query ( \"Patient\" , output_format = \"json\" ) . all () print ( query . response )","title":"Query resources from the server"},{"location":"#credits","text":"All the FHIR resource validation is done via the fhir.resources package. The CLI was built using click . This package was created with Cookiecutter and the audreyr/cookiecutter-pypackage project template.","title":"Credits"},{"location":"api/","text":"FhirServer capabilities : CapabilityStatement property readonly rest_resources : List [ str ] property readonly auth : Optional [ requests . auth . AuthBase ] property readonly __init__ ( self , api_address , username = None , password = None , token = None , client_id = None , client_secret = None , oidc_provider_url = None , fhir_server_type = 'hapi' ) special Initialize a FHIR server connection Parameters: Name Type Description Default api_address str the base endpoint of the fhir server api required username str username for basic auth None password str password for basic auth None token str token for static token auth None client_id str client id for oauth2 None client_secret str client secret for oauth2 None oidc_provider_url str provider url for oauth2 None fhir_server_type str type of fhir server (hapi, blaze, etc) 'hapi' query ( self , resource = None , query_parameters = None , output_format = 'json' , count = 5000 ) Initialize a FHIR query against the server with the given resource or query parameters Parameters: Name Type Description Default output_format str the output format to request from the fhir server (json or xml) defaults to json 'json' query_parameters FHIRQueryParameters optionally pass in a query parameters object to use for the query None resource Union[fhir.resources.resource.Resource, fhir.resources.fhirabstractmodel.FHIRAbstractModel, str] the FHIR resource to query from the server None count int the number of resources requested per page 5000 Returns: a FHIRQuery object that can be further modified with filters and conditions before being executed against the server raw_query ( self , query_string , output_format = 'json' ) Execute a raw query string against the server Parameters: Name Type Description Default query_string str required output_format str 'json' limit required count required add ( self , resource ) Upload a resource to the server Parameters: Name Type Description Default resource Union[fhir.resources.resource.Resource, dict] dictionary containing the resource or FHIR resource object to be uploaded to the server required add_all ( self , resources ) Upload a list of resources to the server, after packaging them into a bundle Parameters: Name Type Description Default resources List[Union[fhir.resources.resource.Resource, dict]] list of resources to upload to the server, either dictionary or FHIR resource objects required Returns: Bundle create response from the fhir server add_bundle ( self , bundle , validate_entries = True ) update ( self , resources ) delete ( self , resources = None , references = None , query = None ) transfer ( self , target_server , query = None , bundle = None ) from_env ( no_auth = False ) classmethod summary ( self ) validate_api_address ( api_address ) staticmethod Validate that api address is well formed and remove trailing / if present https://stackoverflow.com/a/7160778/3838313 Parameters: Name Type Description Default api_address str base endpoint for the fhir rest api of the server required Returns: Type Description str the validated api address FHIRQuery query_url : str property readonly Display the query URL that will be used to execute the query. __init__ ( self , base_url , resource = None , query_parameters = None , auth = None , session = None , output_format = 'json' , count = 5000 ) special where ( self , field = None , operator = None , value = None , field_param = None , filter_dict = None ) Add search conditions regarding a specific field of the queried resource. Conditions can be added via FieldParmeter class instance, via a dictionary or specifying condition via this method's parameter arguments (field, operator, value). Parameters: Name Type Description Default field_param FieldParameter Instance of FieldParameter defining the field to filter for. None filter_dict dict dictionary containing the field to search for and the value to filter for. None field str string specifier of the field to fileter for None operator Union[fhir_kindling.fhir_query.query_parameters.QueryOperators, str] comparison operator either as string or QueryOperators None value Union[int, float, bool, str, list] comparison value. None include ( self , resource = None , reference_param = None , target = None , reverse = False , include_dict = None , include_param = None ) Specify resources related to the queried resource, which should be included in the query results. Parameters: Name Type Description Default resource str name of the resource from which to include related resources, has to match the main resource of the query None reference_param str the reference parameter to search for None target str further specification of the reference parameter to search for None reverse bool whether to consider reverse references False include_dict dict dictionary container the include parameters None include_param IncludeParameter instance of IncludeParameter defining the include parameters None Returns: Type Description FHIRQuery Updated query instance with an added include parameter has ( self , resource = None , reference_param = None , search_param = None , operator = None , value = None , has_param_dict = None , has_param = None ) Specify query parameters for other resources that are referenced by the queried, only the resources whose referenced resources match the specified search criteria are included in the results. Parameters: Name Type Description Default resource str type of resource that references the selected resource None reference_param str name of the field of the related resource that defines the relation None search_param str field of the resource to compare with the given value using the given query operator None operator QueryOperators comparison operator, one of QueryOperators None value Union[int, float, bool, str, list] the value to compare the field to None has_param_dict dict dictionary containing the required reverse chain parameters as keys None has_param ReverseChainParameter instance of ReverseChainParameter object None Returns: Type Description FHIRQuery Updated query object with an added ReverseChainParameter all ( self ) Execute the query and return all results matching the query parameters. Returns: Type Description QueryResponse object containing all resources matching the query, as well os optional included resources. limit ( self , n ) Execute the query and return the first n results matching the query parameters. Parameters: Name Type Description Default n int number of resources to return required Returns: Type Description QueryResponse object containing the first n resources matching the query, as well os optional included resources. first ( self ) Return the first resource matching the query parameters. Returns: Type Description QueryResponse object containing the first resource matching the query set_query_string ( self , raw_query_string ) Use a raw query string to set the query parameters. e.g. /Patient?_id=123&_lastUpdated=gt2019-01-01 Parameters: Name Type Description Default raw_query_string str Query string to set the query parameters required Returns: Type Description Query object with the query parameters set based on the raw query string","title":"API docs"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer","text":"","title":"FhirServer"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.capabilities","text":"","title":"capabilities"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.rest_resources","text":"","title":"rest_resources"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.auth","text":"","title":"auth"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.__init__","text":"Initialize a FHIR server connection Parameters: Name Type Description Default api_address str the base endpoint of the fhir server api required username str username for basic auth None password str password for basic auth None token str token for static token auth None client_id str client id for oauth2 None client_secret str client secret for oauth2 None oidc_provider_url str provider url for oauth2 None fhir_server_type str type of fhir server (hapi, blaze, etc) 'hapi'","title":"__init__()"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.query","text":"Initialize a FHIR query against the server with the given resource or query parameters Parameters: Name Type Description Default output_format str the output format to request from the fhir server (json or xml) defaults to json 'json' query_parameters FHIRQueryParameters optionally pass in a query parameters object to use for the query None resource Union[fhir.resources.resource.Resource, fhir.resources.fhirabstractmodel.FHIRAbstractModel, str] the FHIR resource to query from the server None count int the number of resources requested per page 5000 Returns: a FHIRQuery object that can be further modified with filters and conditions before being executed against the server","title":"query()"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.raw_query","text":"Execute a raw query string against the server Parameters: Name Type Description Default query_string str required output_format str 'json' limit required count required","title":"raw_query()"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.add","text":"Upload a resource to the server Parameters: Name Type Description Default resource Union[fhir.resources.resource.Resource, dict] dictionary containing the resource or FHIR resource object to be uploaded to the server required","title":"add()"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.add_all","text":"Upload a list of resources to the server, after packaging them into a bundle Parameters: Name Type Description Default resources List[Union[fhir.resources.resource.Resource, dict]] list of resources to upload to the server, either dictionary or FHIR resource objects required Returns: Bundle create response from the fhir server","title":"add_all()"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.add_bundle","text":"","title":"add_bundle()"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.update","text":"","title":"update()"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.delete","text":"","title":"delete()"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.transfer","text":"","title":"transfer()"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.from_env","text":"","title":"from_env()"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.summary","text":"","title":"summary()"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.validate_api_address","text":"Validate that api address is well formed and remove trailing / if present https://stackoverflow.com/a/7160778/3838313 Parameters: Name Type Description Default api_address str base endpoint for the fhir rest api of the server required Returns: Type Description str the validated api address","title":"validate_api_address()"},{"location":"api/#fhir_kindling.fhir_query.fhir_query.FHIRQuery","text":"","title":"FHIRQuery"},{"location":"api/#fhir_kindling.fhir_query.fhir_query.FHIRQuery.query_url","text":"Display the query URL that will be used to execute the query.","title":"query_url"},{"location":"api/#fhir_kindling.fhir_query.fhir_query.FHIRQuery.__init__","text":"","title":"__init__()"},{"location":"api/#fhir_kindling.fhir_query.fhir_query.FHIRQuery.where","text":"Add search conditions regarding a specific field of the queried resource. Conditions can be added via FieldParmeter class instance, via a dictionary or specifying condition via this method's parameter arguments (field, operator, value). Parameters: Name Type Description Default field_param FieldParameter Instance of FieldParameter defining the field to filter for. None filter_dict dict dictionary containing the field to search for and the value to filter for. None field str string specifier of the field to fileter for None operator Union[fhir_kindling.fhir_query.query_parameters.QueryOperators, str] comparison operator either as string or QueryOperators None value Union[int, float, bool, str, list] comparison value. None","title":"where()"},{"location":"api/#fhir_kindling.fhir_query.fhir_query.FHIRQuery.include","text":"Specify resources related to the queried resource, which should be included in the query results. Parameters: Name Type Description Default resource str name of the resource from which to include related resources, has to match the main resource of the query None reference_param str the reference parameter to search for None target str further specification of the reference parameter to search for None reverse bool whether to consider reverse references False include_dict dict dictionary container the include parameters None include_param IncludeParameter instance of IncludeParameter defining the include parameters None Returns: Type Description FHIRQuery Updated query instance with an added include parameter","title":"include()"},{"location":"api/#fhir_kindling.fhir_query.fhir_query.FHIRQuery.has","text":"Specify query parameters for other resources that are referenced by the queried, only the resources whose referenced resources match the specified search criteria are included in the results. Parameters: Name Type Description Default resource str type of resource that references the selected resource None reference_param str name of the field of the related resource that defines the relation None search_param str field of the resource to compare with the given value using the given query operator None operator QueryOperators comparison operator, one of QueryOperators None value Union[int, float, bool, str, list] the value to compare the field to None has_param_dict dict dictionary containing the required reverse chain parameters as keys None has_param ReverseChainParameter instance of ReverseChainParameter object None Returns: Type Description FHIRQuery Updated query object with an added ReverseChainParameter","title":"has()"},{"location":"api/#fhir_kindling.fhir_query.fhir_query.FHIRQuery.all","text":"Execute the query and return all results matching the query parameters. Returns: Type Description QueryResponse object containing all resources matching the query, as well os optional included resources.","title":"all()"},{"location":"api/#fhir_kindling.fhir_query.fhir_query.FHIRQuery.limit","text":"Execute the query and return the first n results matching the query parameters. Parameters: Name Type Description Default n int number of resources to return required Returns: Type Description QueryResponse object containing the first n resources matching the query, as well os optional included resources.","title":"limit()"},{"location":"api/#fhir_kindling.fhir_query.fhir_query.FHIRQuery.first","text":"Return the first resource matching the query parameters. Returns: Type Description QueryResponse object containing the first resource matching the query","title":"first()"},{"location":"api/#fhir_kindling.fhir_query.fhir_query.FHIRQuery.set_query_string","text":"Use a raw query string to set the query parameters. e.g. /Patient?_id=123&_lastUpdated=gt2019-01-01 Parameters: Name Type Description Default raw_query_string str Query string to set the query parameters required Returns: Type Description Query object with the query parameters set based on the raw query string","title":"set_query_string()"},{"location":"connect/","text":"This page will showcase the different options to connect to the REST API of any FHIR server. In the simplest case (which is not recommended), you can connect to an unsecured REST API by intializing a server object with only base URL. from fhir_kindling import FhirServer fhir_server = FhirServer ( api_address = \"http://fhir.example.com/R4\" ) Connecting with basic auth To use basic auth, you need to provide the username and password. from fhir_kindling import FhirServer fhir_server = FhirServer ( api_address = \"http://fhir.example.com/R4\" , username = \"my_username\" , password = \"my_password\" ) Connecting using a static token Use a static token to connect to the FHIR server. from fhir_kindling import FhirServer fhir_server = FhirServer ( api_address = \"http://fhir.example.com/R4\" , token = \"my_token\" ) Connect using OpenID Connect To use OpenID Connect, you need to provide the client id and client secret, as well as the URL to the OpenID Connect server. from fhir_kindling import FhirServer fhir_server = FhirServer ( \"https://fhir.server/fhir\" , client_id = \"client_id\" , client_secret = \"secret\" , oidc_provider_url = \"url\" ) Initialization via environment variables A connection to the server can be initialized based on environment variables. The keys for the environment variables corresponding to the above described authentication methods are the following: Basic Auth: FHIR_USER FHIR_PW Static Token: FHIR_TOKEN OIDC: CLIENT_ID CLIENT_SECRET OIDC_PROVIDER_URL Note Make sure only one of the options is present in the environment. Otherwise, the connection will fail. from fhir_kindling import FhirServer fhir_server = FhirServer . from_env ()","title":"Connect to a FHIR server"},{"location":"connect/#connecting-with-basic-auth","text":"To use basic auth, you need to provide the username and password. from fhir_kindling import FhirServer fhir_server = FhirServer ( api_address = \"http://fhir.example.com/R4\" , username = \"my_username\" , password = \"my_password\" )","title":"Connecting with basic auth"},{"location":"connect/#connecting-using-a-static-token","text":"Use a static token to connect to the FHIR server. from fhir_kindling import FhirServer fhir_server = FhirServer ( api_address = \"http://fhir.example.com/R4\" , token = \"my_token\" )","title":"Connecting using a static token"},{"location":"connect/#connect-using-openid-connect","text":"To use OpenID Connect, you need to provide the client id and client secret, as well as the URL to the OpenID Connect server. from fhir_kindling import FhirServer fhir_server = FhirServer ( \"https://fhir.server/fhir\" , client_id = \"client_id\" , client_secret = \"secret\" , oidc_provider_url = \"url\" )","title":"Connect using OpenID Connect"},{"location":"connect/#initialization-via-environment-variables","text":"A connection to the server can be initialized based on environment variables. The keys for the environment variables corresponding to the above described authentication methods are the following: Basic Auth: FHIR_USER FHIR_PW Static Token: FHIR_TOKEN OIDC: CLIENT_ID CLIENT_SECRET OIDC_PROVIDER_URL Note Make sure only one of the options is present in the environment. Otherwise, the connection will fail. from fhir_kindling import FhirServer fhir_server = FhirServer . from_env ()","title":"Initialization via environment variables"},{"location":"query/","text":"Query Resources The most basic building block of a FHIR query is the resource being queried. That's why the entrypoint to querying a FHIR server, is specifying the resource to query for. After connecting to a FHIR server the API can be queried in a number of ways. Simple example After initializing the client, you can query the server for a list of all the patients in the system. from fhir_kindling import FhirServer # Initialize the client and query instance with a string defining the name of the resource server = FhirServer ( url = \"http://fhirtest.uhn.ca/R4\" ) query = server . query ( resource = \"Patient\" ) # optionally add conditions by which to filter the requested resources query = query . where ({ \"active\" : True }) # Finally execute the query against the server and return the query results results = query . all () Query using pydantic resource The resource to be queried can also be specified using a pydantic model from the fhir.resources library. from fhir_kindling import FhirServer from fhir.resources.patient import Patient server = FhirServer ( url = \"http://fhirtest.uhn.ca/R4\" ) query = server . query ( resource = Patient ) query_result = query . all () Query CLI The CLI allows for querying a server either based on an already existing query string or by specifying a resource that you would like to query. The results can optionally be stored either as a raw bundle response or as a flattened csv file. In a shell with fhir_kindling installed in python (activated venv) fhir_kindling query --help With auth information for stored in environment variable FHIR_TOKEN , this command will query for all observations and store them in a csv file under a given name. fhir_kindling query -r Observation --url https://blaze-fhir.personalhealthtrain.de/fhir -f query_result.csv -o csv Execute a query string against a given server fhir_kindling query -q \"/MolecularSequence?patient.organization.name=DEMO_HIV&_format=json\" --url <base-url-fhir-api> -u <username> -p <password> --token <token> -f \"query_results.csv\" -o csv","title":"Query a server"},{"location":"query/#query-resources","text":"The most basic building block of a FHIR query is the resource being queried. That's why the entrypoint to querying a FHIR server, is specifying the resource to query for. After connecting to a FHIR server the API can be queried in a number of ways.","title":"Query Resources"},{"location":"query/#simple-example","text":"After initializing the client, you can query the server for a list of all the patients in the system. from fhir_kindling import FhirServer # Initialize the client and query instance with a string defining the name of the resource server = FhirServer ( url = \"http://fhirtest.uhn.ca/R4\" ) query = server . query ( resource = \"Patient\" ) # optionally add conditions by which to filter the requested resources query = query . where ({ \"active\" : True }) # Finally execute the query against the server and return the query results results = query . all ()","title":"Simple example"},{"location":"query/#query-using-pydantic-resource","text":"The resource to be queried can also be specified using a pydantic model from the fhir.resources library. from fhir_kindling import FhirServer from fhir.resources.patient import Patient server = FhirServer ( url = \"http://fhirtest.uhn.ca/R4\" ) query = server . query ( resource = Patient ) query_result = query . all ()","title":"Query using pydantic resource"},{"location":"query/#query-cli","text":"The CLI allows for querying a server either based on an already existing query string or by specifying a resource that you would like to query. The results can optionally be stored either as a raw bundle response or as a flattened csv file. In a shell with fhir_kindling installed in python (activated venv) fhir_kindling query --help With auth information for stored in environment variable FHIR_TOKEN , this command will query for all observations and store them in a csv file under a given name. fhir_kindling query -r Observation --url https://blaze-fhir.personalhealthtrain.de/fhir -f query_result.csv -o csv Execute a query string against a given server fhir_kindling query -q \"/MolecularSequence?patient.organization.name=DEMO_HIV&_format=json\" --url <base-url-fhir-api> -u <username> -p <password> --token <token> -f \"query_results.csv\" -o csv","title":"Query CLI"},{"location":"serde/","text":"Serialization Parsing fhir bundles and resources into a tabular format can be achieved by the flattening the resources in the bundle. Since a bundle can contain multiple different resources, the parse currently creates columns for the field of each resource if they do not yet exist. If a column already exists then it can be used otherwise it will be created.","title":"Serde"},{"location":"serde/#serialization","text":"Parsing fhir bundles and resources into a tabular format can be achieved by the flattening the resources in the bundle. Since a bundle can contain multiple different resources, the parse currently creates columns for the field of each resource if they do not yet exist. If a column already exists then it can be used otherwise it will be created.","title":"Serialization"},{"location":"upload/","text":"Upload data to a fhir server Using this library resources can be added to a fhir server as single resources, lists or as predefined bundles. Uploading a single resource Uploading a single resource is done by calling the add function on a FHIR server. The response contains the resource including the server defined id of the resource. The add function takes as argument either a dictionary containing the definition of a resource or a pydantic model object of the resource. Pydantic model from fhir_kindling import FhirServer from fhir.resources.patient import Patient patient = Patient ( name = [ { \"family\" : \"Smith\" , \"given\" : [ \"John\" ], }, ], birthdate = \"1955-05-05\" ) fhir_server = FhirServer ( api_address = \"http://fhir.example.com/R4\" ) response = fhir_server . add ( resource = patient ) To upload an existing bundle to a FHIR server use the upload command of the cli, or the top level upload module Transferring data between FHIR servers","title":"Adding resources to a Server"},{"location":"upload/#upload-data-to-a-fhir-server","text":"Using this library resources can be added to a fhir server as single resources, lists or as predefined bundles.","title":"Upload data to a fhir server"},{"location":"upload/#uploading-a-single-resource","text":"Uploading a single resource is done by calling the add function on a FHIR server. The response contains the resource including the server defined id of the resource. The add function takes as argument either a dictionary containing the definition of a resource or a pydantic model object of the resource.","title":"Uploading a single resource"},{"location":"upload/#pydantic-model","text":"from fhir_kindling import FhirServer from fhir.resources.patient import Patient patient = Patient ( name = [ { \"family\" : \"Smith\" , \"given\" : [ \"John\" ], }, ], birthdate = \"1955-05-05\" ) fhir_server = FhirServer ( api_address = \"http://fhir.example.com/R4\" ) response = fhir_server . add ( resource = patient ) To upload an existing bundle to a FHIR server use the upload command of the cli, or the top level upload module","title":"Pydantic model"},{"location":"upload/#transferring-data-between-fhir-servers","text":"","title":"Transferring data between FHIR servers"}]}